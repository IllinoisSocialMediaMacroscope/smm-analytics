version: "3.3"

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
    - "5672:5672"
    - "15672:15672"

  minio:
    image: minio/minio
    hostname: minio
    ports:
    - "9000:9000"
    volumes:
    - "smile_content_data:/tmp"
    command: server /tmp
    environment:
    - MINIO_ACCESS_KEY=${AWS_ACCESSKEY}
    - MINIO_SECRET_KEY=${AWS_ACCESSKEYSECRET}
    restart: unless-stopped

  algorithm_classification_predict:
    build: ./classification_predict
    image: socialmediamacroscope/classification_predict:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=classification_predict
    restart: unless-stopped

  algorithm_classification_split:
    build: ./classification_split
    image: socialmediamacroscope/classification_split:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=classification_split
    restart: unless-stopped

  algorithm_classification_train:
    build: ./classification_train
    image: socialmediamacroscope/classification_train:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=classification_train
    restart: unless-stopped

  algorithm_histogram:
    build: ./histogram
    image: socialmediamacroscope/histogram:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=histogram
    restart: unless-stopped

  algorithm_network_analysis:
    build: ./network_analysis
    image: socialmediamacroscope/network_analysis:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=network_analysis
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm_preprocessing:
    build: ./preprocessing
    image: socialmediamacroscope/preprocessing:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=preprocessing
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm_sentiment_analysis:
    build: ./sentiment_analysis
    image: socialmediamacroscope/sentiment_analysis:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=sentiment_analysis
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm_screen_name_prompt:
    build: ./screen_name_prompt
    image: socialmediamacroscope/screen_name_prompt:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./screen_name_prompt.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=bae_screen_name_prompt
    restart: unless-stopped

  algorithm_topic_modeling:
    build: ./topic_modeling
    image: socialmediamacroscope/topic_modeling:latest
    depends_on:
    - rabbitmq
    - minio
    command: python ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=topic_modeling
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm_name_entity_recognition:
    build: ./name_entity_recognition
    image: socialmediamacroscope/name_entity_recognition:latest
    depends_on:
    - rabbitmq
    - minio
    command: python3 ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=name_entity_recognition
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm_autophrase:
    build: ./autophrase
    image: socialmediamacroscope/autophrase:latest
    depends_on:
    - rabbitmq
    - minio
    command: python3 ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=autophrase
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  image_crawler:
    build: ./image_crawler
    image: socialmediamacroscope/image_crawler:latest
    depends_on:
    - rabbitmq
    - minio
    command: python3 ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=image_crawler
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  collect_reddit_comment:
    build: ./collect_reddit_comment
    image: socialmediamacroscope/collect_reddit_comment:latest
    depends_on:
    - rabbitmq
    - minio
    command: python3 ./rabbitmq_handler.py
    environment:
    - HOST_IP=${HOST_IP}
    - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
    - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - BUCKET_NAME=${BUCKET_NAME}
    - QUEUE_NAME=reddit_comment
    - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  clowder_create_collection:
    build: ./clowder_create_collection
    image: socialmediamacroscope/clowder_create_collection:latest
    depends_on:
      - rabbitmq
    command: python ./rabbitmq_handler.py
    environment:
      - QUEUE_NAME=clowder_create_collection
    restart: unless-stopped

  clowder_create_dataset:
    build: ./clowder_create_dataset
    image: socialmediamacroscope/clowder_create_dataset:latest
    depends_on:
      - rabbitmq
    command: python ./rabbitmq_handler.py
    environment:
      - QUEUE_NAME=lambda_invoke_clowder
    restart: unless-stopped

  clowder_create_space:
    build: ./clowder_create_space
    image: socialmediamacroscope/clowder_create_space:latest
    depends_on:
      - rabbitmq
    command: python ./rabbitmq_handler.py
    environment:
      - QUEUE_NAME=clowder_create_space
    restart: unless-stopped

  clowder_list:
    build: ./clowder_list
    image: socialmediamacroscope/clowder_list:latest
    depends_on:
      - rabbitmq
    command: python ./rabbitmq_handler.py
    environment:
      - QUEUE_NAME=lambda_list_clowder
    restart: unless-stopped

  clowder_upload_file:
    build: ./clowder_upload_file
    image: socialmediamacroscope/clowder_upload_file:latest
    depends_on:
      - rabbitmq
    command: python ./rabbitmq_handler.py
    environment:
      - HOST_IP=${HOST_IP}
      - QUEUE_NAME=lambda_upload_clowder
      - BUCKET_NAME=${BUCKET_NAME}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    restart: unless-stopped

  crimson_hexagon_monitors:
    build: ./crimson_hexagon_monitors
    image: socialmediamacroscope/crimson_hexagon_monitors:latest
    depends_on:
      - rabbitmq
    command: python ./rabbitmq_handler.py
    environment:
      - QUEUE_NAME=crimson_hexagon_monitors
    restart: unless-stopped

  smile_server:
    build: /Users/cwang138/Documents/Macroscope/SMILE/www
    image: socialmediamacroscope/smile_server:latest
    depends_on:
    - rabbitmq
    - minio
    - algorithm_classification_predict
    - algorithm_classification_split
    - algorithm_classification_train
    - algorithm_histogram
    - algorithm_network_analysis
    - algorithm_preprocessing
    - algorithm_sentiment_analysis
    - algorithm_autophrase
    - algorithm_name_entity_recognition
    - algorithm_topic_modeling
    - algorithm_screen_name_prompt
    - image_crawler
    - collect_reddit_comment
    - crimson_hexagon_monitors
    - clowder_create_collection
    - clowder_create_dataset
    - clowder_create_space
    - clowder_list
    - clowder_upload_file
    ports:
    - "8001:8001"
    command: npm run docker-start
    environment:
    - DOCKERIZED=${DOCKERIZED}
    - LOCAL_ALGORITHM=${LOCAL_ALGORITHM}
    - HOST_IP=${HOST_IP}
    - BUCKET_NAME=${BUCKET_NAME}
    - AWS_ACCESSKEY=${AWS_ACCESSKEY}
    - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
    - TWITTER_CONSUMER_KEY=${TWITTER_CONSUMER_KEY}
    - TWITTER_CONSUMER_SECRET=${TWITTER_CONSUMER_SECRET}
    - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
    - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
    - FLICKR_CONSUMER_KEY=${FLICKR_CONSUMER_KEY}
    - FLICKR_CONSUMER_SECRET=${FLICKR_CONSUMER_SECRET}
    - BOX_CLIENT_ID=${BOX_CLIENT_ID}
    - BOX_CLIENT_SECRET=${BOX_CLIENT_SECRET}
    - DROPBOX_CLIENT_ID=${DROPBOX_CLIENT_ID}
    - DROPBOX_CLIENT_SECRET=${DROPBOX_CLIENT_SECRET}
    - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    volumes:
    - "smile_content_data:/tmp"
    restart: unless-stopped

  smile_graphql:
    build: /Users/cwang138/Documents/Macroscope/SMILE/www/graphql
    image: socialmediamacroscope/smile_graphql:latest
    depends_on:
    - smile_server
    ports:
    - "5050:5050"
    command: npm run docker-start
    environment:
    - DOCKERIZED=${DOCKERIZED}
    - TWITTER_CONSUMER_KEY=${TWITTER_CONSUMER_KEY}
    - TWITTER_CONSUMER_SECRET=${TWITTER_CONSUMER_SECRET}
    - FLICKR_CONSUMER_KEY=${FLICKR_CONSUMER_KEY}
    - FLICKR_CONSUMER_SECRET=${FLICKR_CONSUMER_SECRET}
    restart: unless-stopped

volumes:
  smile_content_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      # put your own local data path here
      device: ${LOCAL_MOUNT_PATH}
