version: "3.3"

services:

  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.redis.address=:6379
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${ADMIN_USER_ID:-""}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 6379:6379
    volumes:
      - ${DATA:-~/docker_data}/letsencrypt:/letsencrypt
      - ${DATA:-~/docker_data}/dynamic:/etc/traefik/dynamic
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik_https.rule= Host(`traefik.${SERVER}`)
      - traefik.http.routers.traefik_https.entrypoints=websecure
      - traefik.http.routers.traefik_https.tls=true
      - traefik.http.routers.traefik_https.tls.certResolver=myresolver
      - traefik.http.routers.traefik_https.service=api@internal
      - traefik.http.middlewares.subnet-only-whitelist.ipwhitelist.sourcerange=141.142.0.0/16, 141.142.0.0/32

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${SERVER}`) && PathPrefix(`/`)
      - traefik.http.routers.rabbitmq.entrypoints=websecure
      - traefik.http.routers.rabbitmq.service=rabbitmq
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
      - traefik.http.routers.rabbitmq.tls.certresolver=myresolver

  minio:
    image: docker.io/bitnami/minio:2023.1.31-debian-11-r0
    container_name: minio
    hostname: minio
    volumes:
      - "smile_content_data:/tmp"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESSKEY}
      - MINIO_ROOT_PASSWORD=${AWS_ACCESSKEYSECRET}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio.rule=Host(`minio.${SERVER}`) && PathPrefix(`/`)
      - traefik.http.routers.minio.entrypoints=websecure
      - traefik.http.routers.minio.service=minio
      - traefik.http.services.minio.loadbalancer.server.port=9001
      - traefik.http.routers.minio.tls.certresolver=myresolver
      - traefik.http.routers.minio-api.rule=Host(`minio-api.${SERVER}`) && PathPrefix(`/`)
      - traefik.http.routers.minio-api.entrypoints=websecure
      - traefik.http.routers.minio-api.service=minio-api
      - traefik.http.services.minio-api.loadbalancer.server.port=9000
      - traefik.http.routers.minio-api.tls.certresolver=myresolver

  redis:
    image: redis
    container_name: redis
    hostname: redis
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.redis.rule=HostSNI(`redis.${SERVER}`)
      - traefik.tcp.http.routers.redis.entrypoints=redis
      - traefik.tcp.http.routers.redis.service=redis
      - traefik.tcp.http.services.redis.loadbalancer.server.port=6379
      - traefik.tcp.http.routers.redis.tls.certresolver=myresolver

  algorithm-classification-predict:
    image: socialmediamacroscope/classification_predict:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=classification_predict
    restart: unless-stopped

  algorithm-classification-split:
    image: socialmediamacroscope/classification_split:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=classification_split
    restart: unless-stopped

  algorithm-classification-train:
    image: socialmediamacroscope/classification_train:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=classification_train
    restart: unless-stopped

  algorithm-histogram:
    image: socialmediamacroscope/histogram:0.1.1
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      - MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=histogram
    restart: unless-stopped

  algorithm-network-analysis:
    image: socialmediamacroscope/network_analysis:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=network_analysis
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm-preprocessing:
    image: socialmediamacroscope/preprocessing:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=preprocessing
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm-sentiment-analysis:
    image: socialmediamacroscope/sentiment_analysis:0.1.4
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      - MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=sentiment_analysis
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm-screen-name-prompt:
    image: socialmediamacroscope/screen_name_prompt:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./screen_name_prompt.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=bae_screen_name_prompt
    restart: unless-stopped

  algorithm-topic-modeling:
    image: socialmediamacroscope/topic_modeling:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=topic_modeling
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm-name-entity-recognition:
    image: socialmediamacroscope/name_entity_recognition:0.1.1
    depends_on:
      - rabbitmq
      - minio
    command: python3 ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=name_entity_recognition
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  algorithm-autophrase:
    image: socialmediamacroscope/autophrase:0.1.3
    depends_on:
      - rabbitmq
      - minio
    command: python3 ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=autophrase
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  image-crawler:
    image: socialmediamacroscope/image_crawler:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python3 ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=image_crawler
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  collect-reddit-comment:
    image: socialmediamacroscope/collect_reddit_comment:0.1.2
    depends_on:
      - rabbitmq
      - minio
    command: python3 ./rabbitmq_handler.py
    environment:
      #- MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_PUBLIC_ACCESS_URL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - AWS_ACCESSKEY=${AWS_ACCESSKEY}
      - AWS_ACCESSKEYSECRET=${AWS_ACCESSKEYSECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - QUEUE_NAME=reddit_comment
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    restart: unless-stopped

  smile-server:
    image: socialmediamacroscope/smile_server:twitter-v2
    container_name: smile_server
    depends_on:
      - rabbitmq
      - minio
      - redis
      - algorithm-classification-predict
      - algorithm-classification-split
      - algorithm-classification-train
      - algorithm-histogram
      - algorithm-network-analysis
      - algorithm-preprocessing
      - algorithm-sentiment-analysis
      - algorithm-autophrase
      - algorithm-name-entity-recognition
      - algorithm-topic-modeling
      - algorithm-screen-name-prompt
#      - clowder-create-collection
#      - clowder-create-dataset
#      - clowder-create-space
#      - clowder-list
#      - clowder-upload-file
    command: npm run docker-start
    environment:
      - HOME=${HOME}
      - DOCKERIZED=${DOCKERIZED}
      - LOCAL_ALGORITHM=${LOCAL_ALGORITHM}
      - MINIO_URL=${MINIO_URL}
      - MINIO_PUBLIC_ACCESS_URL=${MINIO_URL}
      - REDIS_URL=${REDIS_URL}
      - SMILE_GRAPHQL_URL=${SMILE_GRAPHQL_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - BUCKET_NAME=${BUCKET_NAME}
      - AWS_ACCESSKEY=${MINIO_ROOT_USER}
      - AWS_ACCESSKEYSECRET=${MINIO_ROOT_PASSWORD}
      - TWITTER_CONSUMER_KEY=${TWITTER_CONSUMER_KEY}
      - TWITTER_CONSUMER_SECRET=${TWITTER_CONSUMER_SECRET}
      - TWITTER_V2_CLIENT_ID=${TWITTER_V2_CLIENT_ID}
      - TWITTER_V2_CLIENT_SECRET=${TWITTER_V2_CLIENT_SECRET}
      - TWITTER_V2_CALLBACK_URL=${TWITTER_V2_CALLBACK_URL}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_CALLBACK_URL=${REDDIT_CALLBACK_URL}
      - BOX_CLIENT_ID=${BOX_CLIENT_ID}
      - BOX_CLIENT_SECRET=${BOX_CLIENT_SECRET}
      - DROPBOX_CLIENT_ID=${DROPBOX_CLIENT_ID}
      - DROPBOX_CLIENT_SECRET=${DROPBOX_CLIENT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - SINGLE_USER=${SINGLE_USER}
      - CILOGON_CLIENT_ID=${CILOGON_CLIENT_ID}
      - CILOGON_CLIENT_SECRET=${CILOGON_CLIENT_SECRET}
      - CILOGON_CALLBACK_URL=${CILOGON_CALLBACK_URL}
    volumes:
      - "smile_content_data:/tmp"
      - "smile_tag:${HOME}/smile"
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.smile-server.rule=Host(`${SERVER}`)
      - traefik.http.routers.smile-server.entrypoints=websecure
      - traefik.http.routers.smile-server.service=smile-server
      - traefik.http.services.smile-server.loadbalancer.server.port=8001
      - traefik.http.routers.smile-server.tls.certresolver=myresolver

  smile-graphql:
    image: socialmediamacroscope/smile_graphql:twitter-v2
    container_name: graphql
    depends_on:
      - smile-server
    command: npm run docker-start
    environment:
      - DOCKERIZED=${DOCKERIZED}
      - TWITTER_CONSUMER_KEY=${TWITTER_CONSUMER_KEY}
      - TWITTER_CONSUMER_SECRET=${TWITTER_CONSUMER_SECRET}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.graphql.rule=Host(`graphql.${SERVER}`) && Path(`/graphql`)
      - traefik.http.routers.graphql.entrypoints=websecure
      - traefik.http.routers.graphql.service=graphql
      - traefik.http.services.graphql.loadbalancer.server.port=5050
      - traefik.http.routers.graphql.tls.certresolver=myresolver

volumes:
  smile_content_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      # put your own local data path here
      device: "${HOME}/smile_data"

  smile_user:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${HOME}/smile_user"

  smile_tag:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${HOME}/smile"

